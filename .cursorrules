# Cursor.ai Rules for SAASFoundry

## Project Context
- Monorepo structure with Turborepo + pnpm
- TypeScript + tRPC + Next.js
- Focus on type safety and code generation

## Code Generation Rules

### TypeScript
- Strict mode enabled
- Explicit return types
- Interface over type when extendable
- Enums for fixed values

### React Components
- Functional components
- Props interface with JSDoc
- Default exports
- Custom hooks in separate files

### API Development
- tRPC procedures with Zod validation
- Error handling with custom types

### Database
- Prisma schema comments
- Explicit relations
- Indexes for queries
- Soft deletes pattern
- Always include a `createdAt` and `updatedAt` field in every table

## Style Rules

### Naming
- PascalCase: Components, Types, Interfaces
- camelCase: Variables, Functions
- UPPER_CASE: Constants
- kebab-case: Files, Directories

### Comments
- TSDoc for exports
- Inline for complex logic
- TODO format: // TODO(username): description

### File Structure
- One component per file
- Index files for exports
- Consistent import ordering
- Max 300 lines per file

## Testing Requirements
- Jest for unit tests
- Component tests with React Testing Library
- E2E with Playwright
- 80% coverage minimum

## Documentation
- README for each package
- API documentation
- Architecture decisions
- Setup instructions

## AI Assistance
- Type suggestions
- Test generation
- Schema validation
- Code review
- Documentation help


# SAASFoundry AI Development Context

## Project Structure
- Monorepo using Turborepo + pnpm
- TypeScript-first development
- tRPC for type-safe APIs
- Next.js for frontends
- Prisma for database

## Key Directories
```
saas-foundry/
├── packages/
│   ├── trpc/           # API definitions
│   ├── api-server/     # Express server
│   ├── jobs/           # Background jobs
│   ├── shared/         # Utilities
│   ├── ui/            # Frontend packages
│   └── cli/           # CLI tools
└── apps/              # Applications
```

## Development Guidelines

1. Type Safety
- Use Zod for runtime validation
- Leverage tRPC for end-to-end typing
- Strong TypeScript configurations

2. Code Generation
- Prisma for database types
- tRPC for API types
- Component props

3. Testing
- Unit tests with Jest
- E2E with Playwright
- API tests with Supertest

4. Documentation
- TSDoc for functions/components
- README for each package
- Architecture Decision Records (ADRs)

5. AI Assistance Expectations
- Type inference and validation
- Schema generation
- Test case suggestions
- Documentation generation
- Code review

## Common Tasks

1. Creating New Features
- Router definitions in trpc/
- Component implementation in ui/kits
- Integration in frontends

2. Database Changes
- Prisma schema updates
- Migration generation
- Type generation

3. API Development
- Define Zod schemas
- Implement tRPC procedures
- Add input validation

4. Frontend Development
- Reusable components in ui/kits
- Page implementations
- tRPC client integration

## Example Requests

"Generate a tRPC router for user management with Zod schemas"
"Create a React component for subscription pricing display"
"Write Prisma schema for multi-tenant data model"
"Implement background job for usage metrics"
"Create a new Next.js page for user dashboard"
"Add a new API route for user authentication"
"Implement a new feature for user billing"
"Create a new React component for user profile"
"Add a new API route for user settings"
"Implement a new feature for user notifications"